#! /bin/sh -
# Simple bash script to open the current github repo you are in
# in your default browser. Ensure this file is in your $PATH
#
# usage: git open [-help|-h]
#                 [-branch=<branch> | -b=<branch>]
#                 [-branch | -b]
#                 [-commit=<commit-sha> | -c=<commit-sha>]
#                 [-commit | -c]
#                 [-compare=<branch>:<base> | -co=<branch>:<base>]
#                 [-compare=<branch> | -co=<branch>]
#                 [-compare=:<base> | -co=:<base>]
#                 [-compare | -co]

path=

# build_url will pull the remote origin url from the git config
# appending a path as needed for a branch or a commit if specified
# as an option.
build_url() {
  # There is no url or git protocol to work with
  if [ -z "$url" ]; then
    return
  fi

  # If a local repo try get the origin url from there
  if grep -Eq '^/' <<< $url; then
    url=$(cd "${url}"; $cmd)
  fi

  # change 'git@github.com:user/repo' to url format
  if grep -Eviq '^http' <<< $url; then
    url=$(sed -e 's_:_/_' -e 's_^git@_https://_' <<< $url)
  fi

  # remove trailing '.git' from url
  if grep -Eiq '\.git/?$' <<< $url; then
    url=$(sed -e 's_\.git/\?$__' <<< $url)
  fi

  url=$url$path
}

# check_path_not_set just ensures we haven't already set
# a path argument, if it has been set then too many args
# have been supplied so error and exit
check_path_not_set() {
  if [ "$path" ]; then
    print_error_and_usage "conflicting arguments"
    exit 1
  fi
}

# parse_args will iterate over arguments setting up $path
# for the url or returning an error if conflicting arguments
# are supplied.
parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      -branch|-branch=*|-b|-b=* )
        set_branch_path $(get_value $1)
        ;;
      -compare|-compare=*|-co|-co=* )
        set_branch_compare_path $(get_value $1)
        ;;
      -commit|-commit=*|-c|-c=* )
        set_commit_path $(get_value $1)
        ;;
      -help|-h )
        print_usage
        exit 0
        ;;
      * )
        print_error_and_usage "unknown option"
        exit 1
        ;;
    esac
    shift
  done
}

print_error() {
  echo $1 >&2
}

# print_error_and_usage will print the supplied error
# to stderr, print the expected usage and then exit
# with a status of 1
print_error_and_usage() {
  print_error $1
  print_usage >&2
}

# print_usage prints the command usage to stdout
print_usage() {
  cat <<TXT
  usage: git open [-help|-h]
                  [-branch=<branch> | -b=<branch>]
                  [-branch | -b]
                  [-commit=<commit-sha> | -c=<commit-sha>]
                  [-commit | -c]
                  [-compare=<branch>:<base> | -co=<branch>:<base>]
                  [-compare=<branch> | -co=<branch>]
                  [-compare=:<base> | -co=:<base>]
                  [-compare | -co]

  For more details on how the options work please refer to the README
TXT
}

# get_remote_url will check the local git config for a remote url
get_remote_url() {
  local result=$(git config --get remote.origin.url)
  echo $result
}

# get_value will remove the option part of the input
# returning the value, i.e. -c=hi -> hi
get_value() {
  if grep -Eq '=.*$' <<< $1; then
    echo $(sed -e 's/^.*=//' <<< $1)
  fi
}

# rev_parse_head returns the current branch the user is on
rev_parse_head() {
  local result=$(git rev-parse --abbrev-ref HEAD)
  echo $result
}

# rev_parse_sha uses git plumbing to find the full commit
# SHA and append it to $path. It will error and exit if
# the SHA cannot be found
rev_parse_sha() {
  sha=$(git rev-parse $1 2> /dev/null)
  if [ $? -ne 0 ]; then
    print_error_and_usage "commit not found"
    return 1
  fi
  echo $sha
  return 0
}

# set_branch_path sets the branch path, checking the branch
# exists if one is supplied. Otherwise using current branch.
set_branch_path() {
  check_path_not_set
  if [ -n "$1" ]; then
    git rev-parse --verify "$1" > /dev/null
    if [ $? -ne 0 ]; then
      print_error "branch not found"
      exit 1
    fi
    path=/tree/$1
  else
    path=/tree/$(rev_parse_head)
  fi
  return 0
}

# set the $path for the comparing branches
# either compare branch and base branch if specified
# or compare branch with default branch for repo
set_branch_compare_path() {
  check_path_not_set
  path=/compare/

  # if not zero length then option had value, i.e. -co=<branch>
  if [ -n "$1" ]; then
    branch=$(sed -e 's/\:.*//' <<< $1)

    if grep -Eq ':.*$' <<< $1; then
      if [ -z "$branch" ]; then
        branch=$(git rev-parse --abbrev-ref HEAD)
      fi
      base=$(sed -e 's/^.*://' <<< $1)
      path=$path$base...$branch
    else
      path=$path$branch
    fi
  else
    path=$path$(rev_parse_head)
  fi
}

# set_commit_path will find the commit SHA and
# set $path
set_commit_path() {
  check_path_not_set
  path=/commit/

  if [ -n "$1" ]; then
    path=$path$(rev_parse_sha $1)
  else
    path=$path$(rev_parse_sha "HEAD")
  fi

  if [ $? -ne 0 ]; then
    exit 1
  fi
}

url=$(get_remote_url)

# got some args? parse 'em
if [ $# -gt 0 ]; then
  parse_args "$@"
fi

build_url

if [ "$url" ]; then
  case $(uname) in
    'Linux' )
      xdg-open "$url"
      ;;
    'Darwin' )
      open "$url"
      ;;
  esac
else
  echo "Trouble finding remote URL"
  exit 1
fi
